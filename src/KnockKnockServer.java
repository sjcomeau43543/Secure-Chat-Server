/*
 * Copyright (c) 1995, 2014, Oracle and/or its affiliates. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   - Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 *   - Neither the name of Oracle or the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */ 

/* 
 * Copied from http://docs.oracle.com/javase/tutorial/networking/sockets/examples/KnockKnockServer.java
 * Modified to encrypt messages to KnockKnockClient using RSA.java file
 * by Samantha Jo Comeau, WPI, sjcomeau@wpi.edu - 05MAR2017
 * by Tim Schmoyer, MITRE, schmoyert@mitre.org - 06MAR2017
 */

import java.net.*;
import java.io.*;
import java.math.BigInteger;
 
public class KnockKnockServer {
    public static void main(String args) throws IOException {
         
        /*if (args.length != 1) {
            System.err.println("Usage: java KnockKnockServer <port number>");
            System.exit(1);
        }*/
 
        int portNumber = Integer.parseInt(args);
 
        try ( 
            ServerSocket serverSocket = new ServerSocket(portNumber);
            Socket clientSocket = serverSocket.accept();
            PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);
            BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
        ) {
            String inputLine, outputLine;
     	
            // Initiate conversation with client
            KnockKnockProtocol kkp = new KnockKnockProtocol();
            outputLine = kkp.processInputServer(null);
            System.out.println("Server String Message: "+outputLine + "\n");

            out.println(outputLine);

            while ((inputLine = in.readLine()) != null) {
            	
            	//Get Server Response
            	outputLine = kkp.processInputServer(inputLine);
                System.out.println("Server String Message: "+outputLine);

                if (!"Bye.".equals(outputLine)) {
                
                	//Convert String to BigInteger to encrypt Server Response
	                byte[] bytes = outputLine.getBytes();
	                BigInteger message = new BigInteger(bytes);
	                System.out.println("Server BigInteger Message: "+ message);

	                //Encrypt Server Response using the Public Key and Modulus generated by KnockKnockClient
	                BigInteger encrypt = message.modPow(RSA.publicKey, RSA.modulus);
	                System.out.println("Server encrypted BigInteger Message: " + encrypt + "\n");
	                
	            	//Send Server Response to Client
	            	out.println(encrypt);

                }
            }
            
        } catch (IOException e) {
            System.out.println("Exception caught when trying to listen on port "
                + portNumber + " or listening for a connection");
            System.out.println(e.getMessage());
        }
    }
}